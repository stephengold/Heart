// Gradle script to build and run the HeartExamples subproject of "Heart"

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'jme3utilities.test.AppChooser'
}
jar.manifest.attributes('Main-Class': 'jme3utilities.test.AppChooser')

dependencies {
    implementation(libs.commons.exec)
    implementation(libs.acorus) {
        exclude group: 'com.github.stephengold', module: 'Heart'
    }
    runtimeOnly(libs.jme3.desktop)
    runtimeOnly(libs.jme3.effects)
    runtimeOnly(libs.jme3.lwjgl3)
    runtimeOnly(libs.jme3.testdata) // for Jaime

    // HeartExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid runtime warnings from AssetConfig:
    runtimeOnly(libs.jme3.jogg)
    runtimeOnly(libs.jme3.plugins)

    //implementation 'com.github.stephengold:Heart:' + heartVersion // for published library
    implementation project(':HeartLibrary') // for local library build
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    dependsOn 'installDist'
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// Register tasks to run specific applications:

tasks.register('AppChooser', JavaExec) {
    mainClass = 'jme3utilities.test.AppChooser'
}

tasks.register('TestBoundsVisualizer', JavaExec) {
    mainClass = 'jme3utilities.debug.test.TestBoundsVisualizer'
}
tasks.register('TestPas', JavaExec) {
    mainClass = 'jme3utilities.debug.test.TestPas'
}
tasks.register('TestSkeletonVisualizer', JavaExec) {
    mainClass = 'jme3utilities.debug.test.TestSkeletonVisualizer'
}

tasks.register('TestGenerator', JavaExec) {
    mainClass = 'jme3utilities.math.test.TestGenerator'
}

tasks.register('LoopMeshTest', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.LoopMeshTest'
}
tasks.register('TestMergeMeshes', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.TestMergeMeshes'
}
tasks.register('TestRotate', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.TestRotate'
}
tasks.register('TestSolidMeshes', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.TestSolidMeshes'
}
tasks.register('TestSubdivide', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.TestSubdivide'
}
tasks.register('TrianglesToLines', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.TrianglesToLines'
}

tasks.register('TestContrast', JavaExec) {
    mainClass = 'jme3utilities.test.TestContrast'
}
tasks.register('TestMulticolor', JavaExec) {
    mainClass = 'jme3utilities.test.TestMulticolor'
}
tasks.register('TestMySpatial', JavaExec) {
    mainClass = 'jme3utilities.test.TestMySpatial'
}
tasks.register('TestNameGenerator', JavaExec) {
    mainClass = 'jme3utilities.test.TestNameGenerator'
}
tasks.register('TestWireframe', JavaExec) {
    mainClass = 'jme3utilities.test.TestWireframe'
}