// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application'
}

mainClassName = 'jme3utilities.mesh.test.TestSolidMeshes'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

dependencies {
    implementation ('com.github.stephengold:Acorus:0.9.10') {
        exclude group: 'com.github.stephengold', module: 'Heart'
    }
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-effects:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jme3Version

    // HeartExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version

    //implementation 'com.github.stephengold:Heart:' + heartVersion
    implementation project(':HeartLibrary')
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanWrittenAssets')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
tasks.register('cleanWrittenAssets', Delete) { // Acorus output directory
    delete 'Written Assets'
}

// tasks to run the example apps:

tasks.register('TestBoundsVisualizer', JavaExec) {
    mainClass = 'jme3utilities.debug.test.TestBoundsVisualizer'
}
tasks.register('TestPas', JavaExec) {
    mainClass = 'jme3utilities.debug.test.TestPas'
}
tasks.register('TestSkeletonVisualizer', JavaExec) {
    mainClass = 'jme3utilities.debug.test.TestSkeletonVisualizer'
}

tasks.register('TestGenerator', JavaExec) {
    mainClass = 'jme3utilities.math.test.TestGenerator'
}

tasks.register('LoopMeshTest', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.LoopMeshTest'
}
tasks.register(' TestMergeMeshes', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.TestMergeMeshes'
}
tasks.register('TestSolidMeshes', JavaExec) {
    mainClass = 'jme3utilities.mesh.test.TestSolidMeshes'
}

tasks.register('TestContrast', JavaExec) {
    mainClass = 'jme3utilities.test.TestContrast'
}
tasks.register('TestMulticolor', JavaExec) {
    mainClass = 'jme3utilities.test.TestMulticolor'
}
tasks.register('TestMySpatial', JavaExec) {
    mainClass = 'jme3utilities.test.TestMySpatial'
}
tasks.register('TestNameGenerator', JavaExec) {
    mainClass = 'jme3utilities.test.TestNameGenerator'
}
tasks.register('TestWireframe', JavaExec) {
    mainClass = 'jme3utilities.test.TestWireframe'
}